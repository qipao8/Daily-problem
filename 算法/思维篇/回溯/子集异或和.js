// 1863. 找出所有子集的异或总和再求和
// 一个数组的 异或总和 定义为数组中所有元素按位 XOR 的结果；如果数组为 空 ，则异或总和为 0 。

// 例如，数组 [2,5,6] 的 异或总和 为 2 XOR 5 XOR 6 = 1 。
// 给你一个数组 nums ，请你求出 nums 中每个 子集 的 异或总和 ，计算并返回这些值相加之 和 。

// 注意：在本题中，元素 相同 的不同子集应 多次 计数。

// 数组 a 是数组 b 的一个 子集 的前提条件是：从 b 删除几个（也可能不删除）元素能够得到 a 。

 

// 示例 1：
// 输入：nums = [1,3]
// 输出：6
// 解释：[1,3] 共有 4 个子集：
// - 空子集的异或总和是 0 。
// - [1] 的异或总和为 1 。
// - [3] 的异或总和为 3 。
// - [1,3] 的异或总和为 1 XOR 3 = 2 。
// 0 + 1 + 3 + 2 = 6

// 示例 2：
// 输入：nums = [5,1,6]
// 输出：28
// 解释：[5,1,6] 共有 8 个子集：
// - 空子集的异或总和是 0 。
// - [5] 的异或总和为 5 。
// - [1] 的异或总和为 1 。
// - [6] 的异或总和为 6 。
// - [5,1] 的异或总和为 5 XOR 1 = 4 。
// - [5,6] 的异或总和为 5 XOR 6 = 3 。
// - [1,6] 的异或总和为 1 XOR 6 = 7 。
// - [5,1,6] 的异或总和为 5 XOR 1 XOR 6 = 2 。
// 0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28

// 示例 3：
// 输入：nums = [3,4,5,6,7,8]
// 输出：480
// 解释：每个子集的全部异或总和值之和为 480 。

// 提示：
// 1 <= nums.length <= 12
// 1 <= nums[i] <= 20

// 注意，0^a=a,a^x^x=a这个很关键！！

/**
 * @param {number[]} nums
 * @return {number}
 */
 var subsetXORSum = function(nums) {
    let res=0
    // 给出中间变量mid用于计算异或,path可以使用数组长度代表
    let bfs=(mid=0,path=0)=>{
        // 如果长度到达数组长度，那么路走完了。
        if(path==nums.length) return
        for(let i=path;i<nums.length;i++){
            // 计算目标点的异或和
            mid^=nums[i]
            res+=mid
            // 下一条路
            bfs(mid,i+1)
            // 起点重置就是双重异或使得返回原值
            mid^=nums[i]
        }
    }
    bfs()
    return res
};